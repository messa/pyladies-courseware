tasks:

- section:
    markdown: |
      Dnešní projekty jsou součástí projektu 1D Piškvorky. Dělej je jeden po druhém.

- id: handout9_00
  markdown: |
    Rozděl 1D Piškvorky na čtyři moduly:

    - `ai.py`, kde bude funkce `tah_pocitace`,
    - `piskvorky.py`, kde budou ostatní funkce,
    - `hra.py`, kde bude import a volání hlavní funkce z `piskvorky.py` (a nic jiného),
    - `test_piskvorky.py`, kde budou testy.

    Jak se do importů nezamotat? Podívej se do materiálů na sekci [cyklické importy](https://naucse.python.cz/course/pyladies/beginners/circular-imports/).

    _Pokud jsi byla na workshopu Gitu, dej to do Gitu! A kdybys něco nedopatřením rozbila, `git diff HEAD` ukáže změny od poslední revize._

  mandatory: true
  
- id: handout9_01
  markdown: |
    Napiš _aspoň_ dva testy na každou funkci z Piškvorek, ke které testy napsat umíš.
    _Testy pravděpodobně neumíš napsat na funkci `input` a všechny funkce, které ji (byť nepřímo) volají.
    A taky asi neumíš otestovat účinek funkce `print`._
    
  mandatory: true

- id: handout9_02
  markdown: |
    Zkus program přepsat tak, aby část, která není pokrytá automatickými testy, byla co nejmenší.
    _Místo volání `print` můžeš často vrátit řetězec
    a `print` zavolat až na návratovou hodnotu.
    Podobně `input` můžeš zavolat před zavoláním funkce,
    která pak může příkaz od uživatele brát jako argument._

- id: handout9_03
  markdown: |
    Doplň funkci `tah_pocitace` tak, aby brala jako argument symbol, za který má počítač hrát – buď `'x'`, nebo `'o'`.
    Dopiš testy.
    _Nezapomínáš na Git (pokud jsi byla na workshopu Gitu)?_

- id: handout9_04
  markdown: |
    Ověř, že se funkce `tah_pocitace` se umí vyrovnat s jinou délkou hracího pole než 20.
    _„Ověření” znamená napsání příslušného testu._

- id: handout9_05
  markdown: |
    Ověř si, že se `tah_pocitace` chová rozumně když dostane plné hrací pole, nebo pole s délkou 0.
    _Rozumné chování v tomto případě znamená vyvolání rozumné výjimky._

    Podle toho, jak jste se na sraze domluvili, pošli
    soubor `ai.py` (s funkcí `tah_pocitace`)
    e-mailem (např. organizátorům, koučovi, nebo vůbec).
    Posílej ho jako přílohu, nekopíruj ho do textu e-mailu.
    Jestli procházíš kurz sama a můžeš programování konzultovat s někým
    zkušenějším, je tento úkol na takovou konzultaci ideální téma.

    Dozvíš se, jak si tvá strategie stojí proti ostatním – a proti testům, které napíše organizátor. :)
    Strategii je možné i vylepšovat a poslat několik různých verzí. Neboj se poslat i první nástřel!
    _Stejně tak se neboj funkci poslat, i kdyby ještě nebyla úplně dodělaná._

    Na některém dalším srazu bude turnaj o ceny!
