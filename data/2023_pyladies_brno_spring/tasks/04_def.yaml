tasks:

- section:
    markdown: |
      Na začátek trocha teoretického opakování.

- id: handout3b_00
  markdown: |
    Co dělá funkce `print`?

- id: handout3b_01
  markdown: |
    Co _vrací_ funkce `print`?

- section:
    markdown: |
      Trocha experimentování.
      Zadání si prosím pořádně přečti.

- id: handout4_00
  markdown: |
    Co se stane, když tělo nějaké funkce necháš úplně prázdné? Zkus vysvětlit, proč. (Tělo funkce je odsazený blok za dvojtečkou)

- id: handout4_01
  markdown: |
    Co se stane, když necháš úplně prázdné tělo cyklu? Zkus vysvětlit, proč.

- section:
    markdown: |
      Umíš napsat funkci (nebo proceduru)?

      Pozor na slovíčka jako „vrátit“ a „vypsat“, která říkají, co máš dělat.

- id: handout4_06-func
  markdown: |
    Napiš *funkci*, která jako argument bere příjmení uživatelky/uživatele
    a zkusí podle něj uhodnout její/jeho pohlaví.
    To *vrátí* jako řetězec.

    Funkci v programu několikrát zavolej (s různými příjmeními – ty můžeš
    zadat přímo do kódu při volání funkcí). Výsledky vypiš.

    (Pohlaví není možné určit přesně – stačí zvládnout ta nejčastější
    česká příjmení.)

    *Program, který tohle dělá, už máš – úkol spočívá v tom, že z něj
    správný kousek „zabalíš“ do funkce.*

- id: handout05_00
  markdown: |
    Vytvoř funkci `pocet_vterin`, která bude mít dva argumenty: čas v minutách a čas ve vteřinách.
    A bude vracet celkový počet vteřin.

- id: handout05_02
  markdown: |
    Vytvoř funkci, která spočítá *Body Mass Index* pro kočky. Vstupem (parametry) funkce bude
    obvod hrudníku (cm) a délka zadní nohy od kolena ke kotníku (cm). Funkce vrátí číslo *feline body mass index* (fBMI).

    Postup výpočtu fBMI:
    1. Vydělit obvod hrudníku 0.7062 a odečíst délku nohy.
    2. Vydělit výsledek  0.9156.
    3. Od výsledku bodu 2 odečíst délku nohy.

- id: handout05_06
  markdown: |
    Napiš funkci, která bude mít jako parametr jedno číslo a vrátí "Bum", je-li toto číslo liché, a "Bác", je-li
    toto číslo sudé.

- id: handout05_07
  markdown: |
    Napiš funkci, která bude mít jako parametr jedno číslo (`n`) a vypíše `n` řádek. Na prvním řádku bude "Bum", na druhém
    "Bác", na třetím "Bum", atd. Využij funkci z předchozího úkolu.

    Např.

        >>> vypis_bum_bac(5) 
        Bum
        Bác
        Bum
        Bác
        Bum

- id: handout4_02
  mandatory: true
  markdown: |
    Napiš proceduru, která *vykreslí* domeček dané velikosti.
    Velikost se zadá jako argument, např:

    ```python
    vykresli_domecek(30)
    vykresli_domecek(40)
    vykresli_domecek(80)
    ```

    Proceduru v programu několikrát zavolej (s různými velikostmi).

    <img src="/static/tasks/handout4_images/02_domecky.png" alt="domečky" style="max-width: 100%; max-height: 80px">

- id: handout4_03
  markdown: |
    Máš-li ráda geometrii*, můžeš zkusit dávat domečkové proceduře dva argumenty:
    šířku a výšku.
    Je potřeba si vzpomenout na Pythagorovu větu a na goniometrické funkce.
    Konkrétně funkci *arkus tangens* `from math import atan`.

    Pozor, funkce `atan` vrací výsledek v radiánech;
    je potřeba ho převést na stupně (`from math import degrees`).

    <img src="/static/tasks/handout4_images/03_domecky.png" alt="domečky" style="max-width: 100%; max-height: 200px">

    \* t.j. jestli nemáš ráda geometrii, tak tenhle úkol přeskoč

- section:
    markdown: |
      Procvičení programování.
      Často je jednoduché něco napsat, ale dotažení do konce může být časově náročné.
      Tyto úkoly jsou *nepovinné*.
      Nemáš-li čas, přeskoč je a jen se zamysli, jak bys projekt vyřešila.

- id: handout4_05
  markdown: |
    Změň funkci `ano_nebo_ne` tak,
    aby se místo `ano` se dalo použít i `a`, místo `ne` i `n`
    a aby se nebral ohled na velikost písmen a mezery před/za odpovědí.

    Odpovědím jako `možná` nebo `no tak určitě` by počítač dál neměl rozumět.

- id: handout9_07
  markdown: |
    Další vylepšení hry `sibenice`:

    - Použij funkci `zamen` (místo toho, aby byl příslušný kód přímo v hlavním
      programu).
    - Po vypsání počtu neúspěšných pokusů vypiš obrázek.
      Funkci, která vrátí obrázek podle počtu pokusů, si můžeš
      zkopírovat [z Gistu](https://gist.github.com/encukou/77376e445356a9843e278ba387b168f0)
    - Zabal hru do funkce a po skončení dej hráči možnost hru opakovat

- section:
    markdown: |
      Obrázek na konec.

- id: recursive_tree
  markdown: |

    Tento úkol je nepovinný.
    Procvičuje *rekurzi*; koukni před ním na příslušné materiály.

    Řekni želvě, aby nakreslila tento stromeček.
    (Instrukce můžeš řádek po řádku přeložit do Pythonu.)

    <img src="/static/tasks/handout_images/recursive-tree.png" alt="Rekurzivní želví stromek" style="max-width: 100%; max-height: 200px">

    * Stromeček dané **délky** a **úhlu** se kreslí takto:
        * *(Malý stromeček je jen jedna větvička.)* Je-li **délka** menší než 20:
            * Pohni se dopředu o danou **délku**.
            * Otoč se zpátky, o 180°
            * Pohni se dopředu o **délku** *(aby želva byla na stejném místě jako na začátku)*
            * Otoč se zpátky, o 180° *(aby se želva dívala stejným směrem jako na začátku)*
        * Jinak *(je stromeček rozvětvený)*:
            * Pohni se dopředu o polovinu **délky** *(nakreslíš tak kmen)*
            * Otoč se doprava o **úhel**
            * Nakresli stromeček s poloviční **délkou** (`delka/2`) a dvoutřetinovým **úhlem** (`uhel*2/3`)
            * Otoč se doleva o **úhel**
            * Nakresli stromeček s poloviční **délkou** a dvoutřetinovým **úhlem**
            * Otoč se doleva o **úhel**
            * Nakresli stromeček s poloviční **délkou** a dvoutřetinovým **úhlem**
            * Otoč se doprava o **úhel**
            * Otoč se zpátky, o 180°
            * Pohni se dopředu o polovinu **délky** *(aby želva byla na stejném místě jako na začátku)*
            * Otoč se zpátky, o 180° *(aby se želva dívala stejným směrem jako na začátku)*

    * Otoč želvu o 90° doleva *(aby se dívala nahoru)*
    * Nakresli stromeček o **délce** 200 a **úhlu** 60.
