tasks:

- section:
    markdown: |
        Poslední úkol 1D piškvorek zůstává na další týden.

- id: handout4_14
  mandatory: true
  markdown: |
    Zvládneš pro počítač naprogramovat lepší strategii?
    Třeba aby se snažil hrát vedle svých existujících symbolů
    nebo aby bránil protihráčovi?
    Stačí jen docela malé vylepšení!

    Testy by stále měly procházet.

    Odevzdej celý soubor `ai.py`.

- section:
    markdown: |
        Pojďme si procvičit práci se seznamem.

        Některé z projektů – a zvlášť ten poslední – potřebují trochu přemýšlení;
        nebudeš-li vědět jak dál, zeptej se na internetu ostatních
        a řešte společně!

- id: handout6_00
  mandatory: true
  markdown: |
    Napiš funkci `vytvor_seznam_zvirat()`, která vytvoří nový seznam
    domácích zvířat a vrátí ho.
    Domácí zvířata známe tato: `"pes", "kočka", "králík", "had"`.

    *Tuto funkci použiješ pro otestování dalších úloh.
    Nehledej v ní nic složitého.*

    Příklad:

    ```python
    >>> vytvor_seznam_zvirat()
    ['pes', 'kočka', 'králík', 'had']
    ```

    Každé zavolání funkce by mělo vytvořit nový, nezávislý seznam.
    Vyzkoušej si to následujícím „dialogem“:

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> zvirata.pop()
    'had'
    >>> vytvor_seznam_zvirat()
    ['pes', 'kočka', 'králík', 'had']
    >>> zvirata
    ['pes', 'kočka', 'králík']
    ```

- id: handout6_01
  mandatory: true
  markdown: |
    Napiš funkci `filtruj_kratka_jmena`, která dostane seznam řetězců a vrátí
    seznam těch, která jsou kratší než 5 písmen.

    Například:

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> filtruj_kratka_jmena(zvirata)
    ['pes', 'had']
    ```

    Vzpomeň si, jak se vytváří seznam: začni s prázdným seznamem a postupně
    přidávej prvek po prvku.

    Funkce by měla opět vracet nový seznam a svůj argument nechat nezměněný.
    Vyzkoušej si to následujícím „dialogem“:

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> filtruj_kratka_jmena(zvirata)
    ['pes', 'had']
    >>> zvirata
    ['pes', 'kočka', 'králík', 'had']
    ```


- id: handout6_02
  markdown: |
    Napiš funkci `filtruj_k`, která dostane seznam řetězců a vrátí seznam těch,
    která začínají na `k`.

    Například:

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> filtruj_k(zvirata)
    ['kočka', 'králík']
    ```

    Funkce by měla opět vracet nový seznam a svůj argument nechat nezměněný.

- id: handout6_03
  markdown: |
    Napiš funkci `obsahuje`, která dostane seznam a slovo a zjistí, jestli je
    to slovo v daném seznamu.
    Podle toho vrátí `True` nebo `False`.

    Například:

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> obsahuje(zvirata, 'pes')
    True
    >>> obsahuje(zvirata, 'vodováha')
    False
    ```

- id: handout6_05
  mandatory: true
  markdown: |
    Napiš funkci `bez_prvniho`, která dostane seznam jmen a vrátí seznam
    se všemi jeho prvky kromě prvního.

    ```python
    >>> zvirata = vytvor_seznam_zvirat()
    >>> zvirata
    ['pes', 'kočka', 'králík', 'had']
    >>> bez_prvniho(zvirata)
    ['kočka', 'králík', 'had']
    ```

    Funkce by opět neměla změnit původní seznam:

    ```python
    >>> zvirata
    ['pes', 'kočka', 'králík', 'had']
    ```

    A měla by fungovat i pro prázdný seznam:

    ```python
    >>> bez_prvniho([])
    []
    ```

- id: handout6_06
  markdown: |
    Složitější, nepovinný úkol!

    Had byl pyšný na to, že je v abecedě první.
    Dokud nepřiletěla `"andulka"`.

    Abys hada uklidnila, vytvoř funkci `serad_od_druheho`,
    která zvířata seřadí podle abecedy,
    ale bude ignorovat první písmeno. Například:

    <pre>
    >>> zvirata = vytvor_seznam_zvirat()
    >>> serad_od_druheho(zvirata)
    ["h<span style='color: pink'>ad</span>", "p<span style='color: pink'>es</span>", "a<span style='color: pink'>ndulka</span>", "k<span style='color: pink'>očka</span>", "k<span style='color: pink'>rálík</span>"]
    >>> # (barvy jsou tu jen pro přehlednost, tvůj program vypisuje bez barev)
    </pre>

    ---

    Máš tady seznam _hodnot_, které chceš seřadit podle nějakého
    _klíče_. Klíč se dá z každé hodnoty vypočítat – v našem případě je
    to hodnota kromě prvního písmenka (tedy od druhého písmenka dál).

    Postup:

    - Vytvoř seznam dvojic `(klíč, hodnota)`.
    - Seřaď tento seznam dvojic – dvojice se řadí nejdřív podle
        prvního prvku, pak druhého atd.
    - Nakonec vytvoř ze seznamu dvojic výsledný seznam hodnot.

    Vytvoření seznamu se dělá tak, že začneš s prázdným seznamem
    a postupně do něj přidáváš hodnoty jednu po druhé.


- id: cards_deck
  mandatory: true
  markdown: |
    Napiš funkci `vytvor_balicek`, která vrátí nový zamíchaný seznam hracích
    karet pro hru Prší.
    Každá položka seznamu bude dvojice *hodnota-barva*.

    Hodnoty karet jsou 2-10, `'J'`, `'Q'`, `'K'`, `'A'`.
    Barvy jsou `'♥'` `'♦'` `'♠'` `'♣'`.
    (Symboly si můžeš zkopírovat jako text. Nezobrazují-li se ti správně,
    použij `S`, `K`, `P`, `+`.)

    Například:

    ```python
    >>> vytvor_balicek()
    [(2, '♥'), (10, '♠'), ('A', '♣'), ...
    ```


- section:
    markdown: |
      Následující sada úkolů je *nepovinná*.
      Procvičuje seznamy a <var>n</var>-tice.
      Když ji uděláš, budeš mít další hru!

      Tahle sekce není jednoduchá (a poslední dva projekty jsou obzvláště náročné).
      Můžeš zkusit spojit síly s ostatními účastnicemi kurzu!

      Úkoly dělej postupně; navazují na sebe.

- id: handout3b_09-review
  markdown: |
    *Úkol na procvičení a vzpomenutí. Už jsi ho jednou vyřešila.*

    Pomocí cyklů `for` a parametru `end` pro `print` napiš program, který postupně z jednotlivých `'X'` vypíše:

        X X X X X
        X X X X X
        X X X X X
        X X X X X
        X X X X X

    „Z jednotlivých `'X'`“ znamená, že každý `print` vypíše jen jedno `X`.
    Nepoužiješ tedy např. `print('X X X X X')` ani `print('X ' * 5)`.

- id: handout3b_10-review
  markdown: |
    *Úkol na procvičení a vzpomenutí. Už jsi ho jednou vyřešila.*

    Napiš program, který vypíše „tabulku“ s násobilkou.

        0 0 0 0 0
        0 1 2 3 4
        0 2 4 6 8
        0 3 6 9 12
        0 4 8 12 16


- id: handout7_14
  markdown: |
    Napiš funkci, která dostane seznam souřadnic (párů čísel menších než 10,
    která určují sloupec a řádek)
    a vypíše je jako mapu: mřížku 10×10, kde na políčka která jsou v seznamu
    napíše `X`, jinde tečku.
    Například:

        nakresli_mapu([(0, 0), (1, 0), (2, 2), (4, 3), (8, 9), (8, 9)])
        X X . . . . . . . .
        . . . . . . . . . .
        . . X . . . . . . .
        . . . . X . . . . .
        . . . . . . . . . .
        . . . . . . . . . .
        . . . . . . . . . .
        . . . . . . . . . .
        . . . . . . . . . .
        . . . . . . . . X .

    _Jak na to?_

    - Vzpomeň si, jak se vypisuje tabulka: pomocí dvou cyklů `for` zanořených
      do sebe.
    - Pro každou buňku tabulky (tedy vevnitř v cyklu) si vytvoř dvojici
      `souradnice = (cislo_radku, cislo_sloupce)`.
    - Napiš `X`, pokud je dvojice `souradnice` v seznamu. Jinak napiš `.`.

- id: handout7_15
  markdown: |
    Napiš funkci `pohyb`, která dostane seznam souřadnic a světovou stranu
    (`"s"`, `"j"`, `"v"` nebo `"z"`)
    a přidá k seznamu poslední bod „posunutý“ v daném směru. Např.:

        souradnice = [(0, 0)]
        pohyb(souradnice, 'v')
        print(souradnice)         # → [(0, 0), (1, 0)]
        pohyb(souradnice, 'v')
        print(souradnice)         # → [(0, 0), (1, 0), (2, 0)]
        pohyb(souradnice, 'j')
        print(souradnice)         # → [(0, 0), (1, 0), (2, 0), (2, 1)]
        pohyb(souradnice, 's')
        print(souradnice)         # → [(0, 0), (1, 0), (2, 0), (2, 1), (2, 0)]

    Funkce by neměla nic vracet. Jen mění už existující seznam.

- id: handout7_16
  markdown: |
    Napiš cyklus, který se bude ptát uživatele na světovou stranu,
    podle ní zavolá `pohyb`, a následně vykreslí seznam jako mapu.
    Pak se opět se zeptá na stranu atd.

    Začínej se seznamem `[(0, 0), (1, 0), (2, 0)]`.

- id: handout7_17
  markdown: |
    Doplň funkci `pohyb` tak, aby při pohybu umazala první bod ze seznamu
    souřadnic. Výsledný seznam tak bude mít stejnou délku, jako před voláním.

- id: handout7_18
  markdown: |
    Doplň funkci `pohyb` tak, aby zamezila:

    - pohybu ven z mapy,
    - pohybu na políčko, které už v seznamu je.

    Vhodná výjimka pro tyto situace je `ValueError('Game over')`.

- id: handout7_19
  markdown: |
    Teď máš hotový základ hry "Had"!
    Zkus si s ní chvíli hrát.

    Pak přidej do hry hadí potravu.

    Seznam jídla obsahuje na začátku jedno jídlo na políčku, na kterém není had
    (například: `jidlo = [(2, 3)]` znamená jedno jídlo na pozici (2, 3)).
    Když had sežere jídlo, vyroste („nesmaže“ se mu ocas, tedy neprovede se to,
    cos přidala v projektu 13),
    a pokud na mapě zrovna není další jídlo, na náhodném místě (kde není had)
    se přidá jídlo nové.

    Každých 30 tahů se přidá nové jídlo samo od sebe.

    Na mapě se jídlo zobrazuje třeba jako otazník (`?`).

- id: handout7_20
  markdown: |
    Hadí hřiště může mít libovolné rozměry větší než 4×1.
    Třeba 20×20 nebo 10×30.

- section:
    markdown: |
      A nakonec projekt na přemýšlení.

- id: handout7_21
  markdown: |
    Zkus co nejjednodušeji udělat takový seznam, aby platilo:

        seznam[5][5][5][5][5][5][5][5][5][5][5][5][5][5][5][5][5][5][0] == 5

    *Může seznam obsahovat sám sebe?*
